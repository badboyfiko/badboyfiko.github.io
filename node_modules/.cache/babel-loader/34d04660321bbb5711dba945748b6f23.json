{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/filipsulik/work/testform/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/filipsulik/work/testform/src/components/SmallCheckList.js\";\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  cursor: pointer;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  height: 20px;\\n  width: 20px;\\n  background-color: \", \";\\n  margin-right: 10px;\\n  flex-shrink: 0;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  margin: 0;\\n  line-height: 1.2;\\n  text-align: left;\\n  \", \"\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Row, Cell, Flex } from './layout';\nimport styled from 'styled-components';\nimport { fontSize } from 'styled-system';\nconst Option = styled.p(_templateObject(), props => props.theme.colors.darkBlue, fontSize);\nconst CheckBox = styled.div(_templateObject2(), props => props.theme.colors.green);\nconst OptionWrapper = styled(Flex).attrs(() => ({\n  height: 40,\n  alignItems: 'center'\n}))(_templateObject3());\n\nconst CheckList = ({\n  items\n}) => React.createElement(Row, {\n  style: {\n    width: '100%'\n  },\n  justifyContent: \"center\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(Cell, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, items.slice(0, 7).map((item, i) => React.createElement(Flex, {\n  height: 40,\n  alignItems: \"center\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, React.createElement(CheckBox, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}), React.createElement(Option, {\n  fontSize: [12, 14],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, i + 1, \".\"), \"\\xA0\", React.createElement(Option, {\n  fontSize: [12, 14],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, item)))), React.createElement(Cell, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}, items.slice(7, 14).map((item, i) => React.createElement(OptionWrapper, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, React.createElement(CheckBox, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}), React.createElement(Option, {\n  fontSize: [12, 14],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, i + 8, \". \"), \"\\xA0\", React.createElement(Option, {\n  fontSize: [12, 14],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, item)))));\n\nexport default CheckList;","map":{"version":3,"sources":["/Users/filipsulik/work/testform/src/components/SmallCheckList.js"],"names":["React","Row","Cell","Flex","styled","fontSize","Option","p","props","theme","colors","darkBlue","CheckBox","div","green","OptionWrapper","attrs","height","alignItems","CheckList","items","width","slice","map","item","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,IAAnB,QAA8B,UAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,QAAR,QAAuB,eAAvB;AAEA,MAAMC,MAAM,GAAGF,MAAM,CAACG,CAAV,oBACDC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBC,QAD3B,EAKRN,QALQ,CAAZ;AAQA,MAAMO,QAAQ,GAAGR,MAAM,CAACS,GAAV,qBAGQL,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmBI,KAHpC,CAAd;AAQA,MAAMC,aAAa,GAAGX,MAAM,CAACD,IAAD,CAAN,CAAaa,KAAb,CAAmB,OAAO;AAACC,EAAAA,MAAM,EAAE,EAAT;AAAaC,EAAAA,UAAU,EAAE;AAAzB,CAAP,CAAnB,CAAH,oBAAnB;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa,oBAAC,GAAD;AAAK,EAAA,KAAK,EAAE;AAACC,IAAAA,KAAK,EAAE;AAAR,GAAZ;AAA6B,EAAA,cAAc,EAAC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAC3B,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBC,GAAlB,CAAsB,CAACC,IAAD,EAAOC,CAAP,KACnB,oBAAC,IAAD;AAAM,EAAA,MAAM,EAAE,EAAd;AAAkB,EAAA,UAAU,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,MAAD;AAAQ,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BA,CAAC,GAAG,CAAjC,MAFJ,UAII,oBAAC,MAAD;AAAQ,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BD,IAA7B,CAJJ,CADH,CADL,CAD2B,EAW3B,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKJ,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,EAAmBC,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,KACpB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,MAAD;AAAQ,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BA,CAAC,GAAG,CAAjC,OAFJ,UAII,oBAAC,MAAD;AAAQ,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BD,IAA7B,CAJJ,CADH,CADL,CAX2B,CAA/B;;AAuBA,eAAeL,SAAf","sourcesContent":["import React from 'react'\nimport {Row, Cell, Flex} from './layout'\nimport styled from 'styled-components'\nimport {fontSize} from 'styled-system'\n\nconst Option = styled.p`\n  color: ${props => props.theme.colors.darkBlue};\n  margin: 0;\n  line-height: 1.2;\n  text-align: left;\n  ${fontSize}\n`\n\nconst CheckBox = styled.div`\n  height: 20px;\n  width: 20px;\n  background-color: ${props => props.theme.colors.green};\n  margin-right: 10px;\n  flex-shrink: 0;\n`\n\nconst OptionWrapper = styled(Flex).attrs(() => ({height: 40, alignItems: 'center'}))`\n  cursor: pointer;\n`\n\nconst CheckList = ({items}) => <Row style={{width: '100%'}} justifyContent=\"center\">\n    <Cell>\n        {items.slice(0, 7).map((item, i) => (\n            <Flex height={40} alignItems=\"center\">\n                <CheckBox />\n                <Option fontSize={[12, 14]}>{i + 1}.</Option>\n                &nbsp;\n                <Option fontSize={[12, 14]}>{item}</Option>\n            </Flex>\n        ))}\n    </Cell>\n    <Cell>\n        {items.slice(7, 14).map((item, i) => (\n            <OptionWrapper>\n                <CheckBox />\n                <Option fontSize={[12, 14]}>{i + 8}. </Option>\n                &nbsp;\n                <Option fontSize={[12, 14]}>{item}</Option>\n            </OptionWrapper>\n        ))}\n    </Cell>\n</Row>\n\nexport default CheckList\n"]},"metadata":{},"sourceType":"module"}